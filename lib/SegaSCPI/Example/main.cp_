/*********************************************************************
	Test_SegaSCPI.cpp
 Ejemplo de uso de la librería SegaSCPI para  comunicar
  un PC con Arduino a través del puerto serie "Serial" 
**********************************************************************/
#include <Arduino.h>
#include <SegaSCPI.h>
/**********************************************************************
Prototipos de funciones
***********************************************************************/
//Funciones scpi comunes a todos los sistemas
void errorSCPI(void);
void opcSCPI(void);
void idnSCPI(void);
void clsSCPI(void);
// Funciones de nuestro sistema
void funcion1(void);//Función del menú raiz
void funcion2(void);//Función del menú raiz
void funcion11(void);//Función del submenú SUBMENU1
void funcion12(void);//Función del submenú SUBMENU1
/**********************************************************************
 submenú al que llamamos por ejemplo "SUBMENU1". Contiene dos 
 comandos, a los que decidimos llamar,COMANDO11 con nombre
 abreviado C11 y COMANDO12 con nombre abreviado C12. El 
 primero hará que se ejecute la función "void funcionC11(void)"
 y el segundo la función "void funcionC12(void)" que definiremos
 como cualquier otra función.
**********************************************************************/
 tipoNivel SUBMENU1[] = //menú de comandos opcional
{
	SCPI_COMANDO(COMANDO11,C11,funcion11)//Comando que ejecuta la función funcion11
	SCPI_COMANDO(COMANDO12,C12,funcion12)//Comando que ejecuta la función funcion12
	// TO DO Añadir aquí más comandos o submenús
};
/**********************************************************************
 Menú principal que contiene comandos y submenús
 Tiene dos comandos:
 	COMANDO1 abreviado C1 que ejecuta la función funcion1
	COMANDO2 abreviado C2 que ejecuta la función funcion2
  El submenú definido más arriba: 
  	SUBMENU1 abreviado SM1 
	Y 4 comandos propios de SegaSCPI
**********************************************************************/
MENU_SCPI  //menú de  comandos y submenús obligatorio
{
	SCPI_SUBMENU(SUBMENU1,SM1 )	//Submenú con comandos declarado más arriba
	SCPI_COMANDO(COMANDO1,C1,funcion1) //Comando que ejecuta la funcion void funcion1
	SCPI_COMANDO(COMANDO2,C2,funcion2) //Comando que ejecuta la función funcion2
	// TO DO Añadir aquí comandos o submenús
	//Comandos de funciones propias de SegaSCPI 
	SCPI_COMANDO(ERROR,ERR,errorSCPI)// Envía el ultimo error
  	SCPI_COMANDO(*IDN,*IDN,idnSCPI)// Identifica el instrumento
	SCPI_COMANDO(*OPC,*OPC,opcSCPI)// Devuelve un 1 al PC
	SCPI_COMANDO(*CLS,*CLS,clsSCPI)// Borra la pila de errores
};

//declaramos el nivel Raíz cuya dirección se pasa a la función begin de SegaSCPI
tipoNivel Raiz[]= SCPI_RAIZ //// Declaración obligatoria del nivel Raiz
//Opcionalmente podemos definir la lista de errores (a partir de 7):
String misErrores[]=
{//Los errores de 0 a 6 son de scpi
	"7 mi error",
	"8 mi error",
	"9 mi error",
};


//Ahora el código habitual de Arduino:
SegaSCPI segaScpi;//Instanciamos el objeto SCPI
/**********************************************************************
 					setup
**********************************************************************/
void setup() 
{
String nombreSistema="Mi sistema";//Opcionalmente podemos dar un nombre a nuestro sistema
segaScpi.begin(Raiz, &nombreSistema,misErrores);//Inicializamos 
// Abre el puerto serie
Serial.begin(115200); 
}
void loop()
{
  // Si recibe algo por el puerto serie lo procesa con SegaSCPI 
  if (Serial.available()){segaScpi.scpi(&Serial);}
/*
TO DO Poner aquí el código de usuario
*/
}// loop() 

//Ahora solo nos queda definir las funciones de nuestro sistema:

void funcion1(void)
{
 segaScpi.PuertoActual->println
 ("Se ha recibido el COMANDO1 y se ha ejecutado la funcion funcion1");	
}
void funcion2(void)
{
 segaScpi.PuertoActual->println
 ("Se ha recibido el COMANDO2 y se ha ejecutado la funcion funcion2");	
}
/****************************************************************
	Comando SUBMENU1:COMANDO11 ó SM1:C11
	Ejecuta la función void funcion11(void);
	Cambia el valor de la variable tipo double "Variable1"
      int actualizaVarEntera(int *,int,int);//Actualiza variable entero
      int actualizVarDiscreta(int *,int*,int);//Actualiza entero discreta
      int actualizaVarBool(bool *);//Actualiza Booleano
      int actualizaVarDecimal(double *,double,double);//Actualiza decimal


*****************************************************************/
void fs3(void)
{
	static double Variable1=1.1;
	int Resultado;
	Resultado=segaScpi.actualizaVarDecimal(&Variable1,10.0,0.0);
	switch (Resultado)
	{
		case 0:
			segaScpi.PuertoActual->println("No Se cambio el valor de la Variable1");
			segaScpi.errorscpi(7);
		break;
		case 1:
			segaScpi.PuertoActual->println("Se cambio el valor de la Variable1");
		break;
		case 2:
			segaScpi.PuertoActual->println("Se envio al PC el valor de la Variable1");
		break;
	}
}
/*****************************************************************
	Comando SUBMENU1:COMANDO11 ó SM1:C12
	Ejecuta la función void fs4(void);
	Cambia el valor de la variable discreta tipo int "Variable2"
*****************************************************************/
void fs4(void)
{
	int Resultado;
	static int Variable2=100;
	int ValoresVariable2[]={1,10,100};
	Resultado=segaScpi.actualizaVarDiscreta(&Variable2,	ValoresVariable2,sizeof(ValoresVariable2));
	switch (Resultado)
	{
		case 0:
			segaScpi.PuertoActual->println("No Se cambio el valor de la Variable2");
		segaScpi.errorscpi(7);
		break;
		case 1:
			segaScpi.PuertoActual->println("Se cambio el valor de la Variable2");
		break;
		case 2:
			segaScpi.PuertoActual->println("Se envio al PC el valor de la Variable2");
		break;
	}	
}
/************************************************************************
    Funciones scpi comunes a todos los sistemas
 *************************************************************************/
 /************************************************************************
    Función del Comando: ERROR ó ERR
    Envia por el puerto el último error registrado por SEGAINVEX-SCPI
 *************************************************************************/
void errorSCPI(void){segaScpi.errorscpi(0);}
/*************************************************************************
  Función del Comando: *IDN"
   Envia por el puerto una cadena que identifica al sistema
 *************************************************************************/
void idnSCPI(void){segaScpi.PuertoActual->println(segaScpi.nombreSistema);}	
 /************************************************************************
  Función del Comando:*OPC
  Envia por el puerto un uno
 *************************************************************************/
void opcSCPI(void){	segaScpi.PuertoActual->println("1");}
/*************************************************************************
    Comando: CLS
    Limpia la pila de errores de SEGAINVEX-SCPI
 *************************************************************************/
void clsSCPI(void){segaScpi.errorscpi(-1);}
/*************************************************************************/
/*
  Prueba a enviar por el puerto serie los comandos (terminados con \r)
  sm1:c12?
  sm1:c12 10
  sm1:c12?
  c1
  c2
  err?
  *idn
  err?:*idn
*/
/**********************FIN********************************************/
 
